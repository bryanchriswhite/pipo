<!doctype html>
<html>
  <head>
    <title>PiPo</title>
  </head>
  <body>
    <div id="mainContainer">
      <ul id="messages">
      </ul>
      <div id="menu">
        <div id="left-menu-profile">
          <div id="menu-header-profile">
            <div class="ui teal buttons">
              <div class="ui button">Options</div>
              <div class="ui floating dropdown icon button">
                <i class="chevron down icon"></i>
                <div id="options-menu-dropdown" class="menu">
                  <div class="ui icon search input">
                    <i class="search icon"></i>
                    <input type="text" name="search" placeholder="Search messages...">
                  </div>
                  <div id="generate-keypair-button" class="item"><i class="spy icon"></i> Generate new client key pair</div>
                  <div id="select-keypair-button" class="item"><i class="folder open icon"></i> Select existing key pair</div>
                  <div id="export-keypair-button" class="item"><i class="download icon"></i> Export client key pair</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div id="left-menu-scroll">
          <div class="room-list-container">
            <h5 class="room-list-header">Rooms</h5>
            <ul id="room-list">
              <li class="room-list-item">#general</li>
            </ul>
          </div>
          <div class="user-list-container">
            <h5 class="user-list-header">Users</h5>
            <div id="user-list">
            </div>
          </div>
        </div>
        <div id="menu-actions">
        </div>
      </div>
    </div>

    <div class="input-container" id="input-container">
      <form>
        <div id="message-input-container" class="ui left fluid action icon input loading">
          <textarea id="message-input" class="message-input ui left icon loading" autocorrect="off" spellcheck="true" autocomplete="off" type="text" placeholder="          Please wait while your secure connection is configured..."></textarea>
          <i id="loading-icon" class="search icon"></i>
          <button id="send-button" class="ui button" disabled="true">Send</button>
        </div>
      </form>
    </div>

    <div class="ui form basic modal password-prompt-modal">
      <i class="close icon"></i>
      <div class="header">
        Decrypt Master Key
      </div>
      <div class="ui">
        <div class="description">
          <p>Please enter your client key password...</p>
        </div>
        <div class="ui input">
            <input name="password" type="password" placeholder="password"></input>
        </div>
      </div>
      <div class="actions">
        <div class="two fluid ui inverted buttons">
          <div class="ui red basic inverted button">
            <i class="remove icon"></i>
            Cancel
          </div>
          <div class="ui green basic inverted button password-submit-button">
            <i class="checkmark icon"></i>
            Ok
          </div>
        </div>
      </div>
    </div>

    <div class="ui form basic modal key-creds-modal">
      <i class="close icon"></i>
      <div class="header">
        Enter your key information
      </div>
      <div class="ui">
        <div class="description">
          <p>Username:</p>
        </div>
        <div class="ui input">
            <input name="username" type="username" placeholder="User Name"></input>
        </div>
                  <div class="description">
          <p>Full Name:</p>
        </div>
        <div class="ui input">
            <input name="fullname" type="fullname" placeholder="Full Name"></input>
        </div>
                  <div class="description">
          <p>Email:</p>
        </div>
        <div class="ui input">
            <input name="email" type="email" placeholder="Email"></input>
        </div>
        <div class="description">
          <p>Please enter a strong password:</p>
        </div>
      </div>
      <div class="actions">
        <div class="two fluid ui inverted buttons">
          <div class="ui red basic inverted button">
            <i class="remove icon"></i>
            Cancel
          </div>
          <div class="ui green basic inverted button key-creds-submit-button">
            <i class="checkmark icon"></i>
            Ok
          </div>
        </div>
      </div>
    </div>

    <div class="ui form basic modal import-keypair-modal">
      <i class="close icon"></i>
      <div class="header">
        Import Client Key Pair
      </div>
      <div class="ui">
        <div class="description">
          <p>Please locate your keys...</p>
        </div>
        <div class="ui">
          <a href="#" id="select-pubkey">Public Key: </a><input type="file" id="pubkey-file-input"></input>
        </div>
        <div class="ui">
          <a href="#" id="select-privkey">Private Key: </a><input type="file" id="privkey-file-input"></input>
        </div>
      </div>
      <div class="actions">
        <div class="two fluid ui inverted buttons">
          <div class="ui red basic inverted button">
            <i class="remove icon"></i>
            Cancel
          </div>
          <div class="ui green basic inverted button import-keypair-submit-button">
            <i class="checkmark icon"></i>
            Ok
          </div>
        </div>
      </div>
    </div>

    <link rel="stylesheet" href="/css/semantic.css">
    <link rel="stylesheet" href="/css/pipo.css">
    <link rel="stylesheet" href="/css/highlight.js/styles/default.css">

    <script src="/js/openpgp.js"></script>
    <script src="/js/lib/kbpgp.js"></script>
    <!-- These should definitely be cached locally -->
    <script src="http://code.jquery.com/jquery-1.11.1.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/1.12.2/semantic.js"></script>

    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/lib/highlight.min.js"></script>
    <script src="/js/lib/moment.min.js"></script>
    <script src="/js/lib/livestamp.min.js"></script>
    <script src="/js/marked.js"></script>

    <script src="/js/chatManager.js"></script>
    <script src="/js/socketClient.js"></script>
    <script src="/js/encryptionManager.js"></script>

    <script>
      hljs.initHighlightingOnLoad();
      openpgp.initWorker('/js/openpgp.worker.js');
    </script>

    <script>








      socket.on('chat status', function(data) {
        console.log("Got chat status...");
        var statusType = data.statusType;
        var statusMessage = data.statusMessage;
        localMsg({ type: statusType, message: statusMessage });
        var $messages = $('#messages');
        $messages[0].scrollTop = $messages[0].scrollHeight;
      });

      socket.on('join', function(data) {
        var channel = data.channel;
        var joinUser = data.joinUser;
        sendNotification(null, 'PiPo', joinUser+' has joined channel #'+channel, 3000);
      });

      socket.on('privateMessage', function(data) {
        var fromUser = data.fromUser;
        var toUser = data.toUser;
        var pgpMessage = data.message;
        var id = data.id;
        decryptMessage(keyPair.privKey, clientKeyPassword, pgpMessage, function(err, message) {
          localMsg({ id: id, type: fromUser+" -> "+toUser, message: message });
          var $messageInput = $('#message-input');
          $messageInput[0].scrollTop = $messageInput[0].scrollHeight;
          sendNotification(null, 'Private Message from '+fromUser, $(message).text(), 3000);
        });
      });

      socket.on('roomMessage', function(data){
        console.log("Just got chat message!");
        var fromUser = data.userName;
        var pgpMessage = data.pgpMessage;
        //console.log("Got message, attempting to decrypt");
        decryptMessage(masterKeyPair.privKey, masterKeyPassword, pgpMessage, function(err, message) {
          console.log("Decrypting master private key with password '"+masterKeyPassword+"'");
          //console.log("inside decrypt message callback");
          if (err) {
            console.log("ERROR Decrypting message: "+err);
          } else {
            //console.log("Message decrypted! - '"+message+"'");
            //var sanatizedMessage = sanatize(message);
            console.log("raw message is: "+message);
            var messages = $('#messages');
            var messageLine = "["+fromUser+"] "+message;
            localMsg({ type: null, message: messageLine });
            messages[0].scrollTop = messages[0].scrollHeight;
            var regexResult = new RegExp('@'+userName, 'i').exec(message);
            //var mentionRegex = /@<%= userName %>/;
            //var regexResult = message.match(mentionRegex);
            if (regexResult !== null) {
              sendNotification(null, fromUser+' mentioned you...', $(message).text(), 3000);
            }
          }
        });
      });

      socket.on('userlist update', function(data) {
        var userList = data.userList;
        var joinUser = data.joinUser;
        var channel = data.channel;
        console.log("[USERLIST UPDATE] Got userlist update of "+userList.toString());
        updateUserList({ userList: userList }, function(err) {
          if (err) return console.log("Error updating user list: "+err);
          if (typeof joinUser !== 'undefined') {
            sendNotification(null, 'PiPo', joinUser+' has joined channel #'+channel, 3000);
            console.log("UserList update successful...");
          };
        });
      });

      function getNewMessageId(callback) {
        var id = new Date().getTime();
        callback(id);
      };

      function generateKeyPair(numBits, userId, passphrase, callback) {
        var options = {
          numBits: numBits,
          userId: userId,
          passphrase: passphrase
        }
        console.log("Generating keypair, please wait...");
        window.openpgp.generateKeyPair(options).then(function(keyPair) {
          var privKey = keyPair.privateKeyArmored;
          var pubKey = keyPair.publicKeyArmored;
          keyPair = {
            privKey: privKey,
            pubKey: pubKey
          }
          return callback(null, keyPair);
        }).catch(function(err) {
          return callback(err, null);
        });
      };

      function encryptMessage(key, message, callback) {
        var masterPubKey = openpgp.key.readArmored(key);
        openpgp.encryptMessage(masterPubKey.keys, message).then(function(pgpMessage) {
          callback(null, pgpMessage);
        }).catch(function(error) {
          return callback(error, null);
        });
      };

      function decryptMessage(key, passphrase, pgpMessage, callback) {
        var masterPrivateKey = openpgp.key.readArmored(key).keys[0];
        if (typeof masterPrivateKey !== 'undefined') {
          masterPrivateKey.decrypt(passphrase);
          pgpMessage = openpgp.message.readArmored(pgpMessage);
          openpgp.decryptMessage(masterPrivateKey, pgpMessage).then(function(plaintext) {
            console.log("Decrypted message!");
            callback(null, plaintext);
          }).catch(function(err) {
            console.log("Error decrypting message");
            return callback(err, null);
          });
        } else {
          console.log("master private key is undefined!");
          return callback("master private key is undefined", null);
        }
      }

      var rAmp = /&/g,
        rLt = /</g,
        rGt = />/g,
        rApos =/\'/g,
        rQuot = /\"/g,
        hChars =/[&<>\"\']/;

      function coerceToString(val) {
        return String((val === null || val === undefined) ? '' : val);
      }

      function sanatize(str) {
        str = coerceToString(str);

        return hChars.test(str)
          ? str
            .replace(rAmp,'&amp;')
            .replace(rLt,'&lt;')
            .replace(rGt,'&gt;')
            .replace(rApos,'&#39;')
            .replace(rQuot, '&quot;')
          : str;
      };

      // Sends a notification that expires after a timeout. If timeout = 0 it does not expire
      function sendNotification(image, title, message, timeout, showOnFocus) {
        getNotifyPermissions(function(permission) {
          if (permission) {
            console.log("[NOTIFICATION] Attempting to display notification");
            // Default values for optional params
            timeout = (typeof timeout !== 'undefined') ? timeout : 0;
            showOnFocus = (typeof showOnFocus !== 'undefined') ? showOnFocus : false;
            // Check if the browser window is focused
            var isWindowFocused = document.querySelector(":focus") === null ? false : true;
            // Check if we should send the notification based on the showOnFocus parameter
            var shouldNotify = !isWindowFocused || isWindowFocused && showOnFocus;
            console.log("[NOTIFICATION] shouldNotify is "+shouldNotify);
            if (shouldNotify) {
              // Create the notification object
              //var notification = window.webkitNotifications.createNotification(
              //  image, title, message
              //);
              // Display the notification
              //notification.show();
              console.log("[NOTIFACTION] Sending notification now...");
              var notification = new Notification(title, { body: message });
              if (timeout > 0) {
                // Hide the notification after the timeout
                setTimeout(function(){
                  notification.close()
                }, timeout);
              }
            }
          } else {
            console.log("Don't have permission to display notification");
          }
        });
      };

      function getNotifyPermissions(callback) {
        // check for notification compatibility
        if(!window.Notification) {
          // if browser version is unsupported, be silent
          return callback(false);
        }
        // log current permission level
        console.log(Notification.permission);
        // if the user has not been asked to grant or deny notifications from this domain
        if(Notification.permission === 'default') {
          Notification.requestPermission(function() {
            // callback this function once a permission level has been set
            return callback(true);
          });
        }
        // if the user has granted permission for this domain to send notifications
        else if(Notification.permission === 'granted') {
          return callback(true);
        }
        // if the user does not want notifications to come from this domain
        else if(Notification.permission === 'denied') {
          return callback(false);
        }
      };
    </script>


  </body>
</html>
