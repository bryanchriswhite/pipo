<!doctype html>
<html>
  <head>
    <title>PiPo</title>
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font: 13px Helvetica, Arial; }
      form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
      form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
      form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages li { padding: 5px 10px; }
      #messages li:nth-child(odd) { background: #eee; }
    </style>
  </head>
  <body>
    <ul id="messages"></ul>
    <form action="">
      <input id="m" autocomplete="off" /><button>Send</button>
    </form>
    <script src="/js/openpgp.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="http://code.jquery.com/jquery-1.11.1.js"></script>
    <script>
      var socket = io();
      socket.emit('join', { nick: "<%= nick %>", channel: "general" } );
      $('form').submit(function(){
        var pubkey = "<%= pubkey %>";
        var nick = "<%= nick %>";
        var message = $('#m').val();
        console.log("attempting to encrypt message");
        encryptMessage(pubkey, message, function(pgpMessage, err) {
          if (err) {
            console.log("Error Encrypting Message: "+err);
          } else {
            console.log("Message encrypted successfully");
            socket.emit('chat message', { nick: nick, pgpMessage: pgpMessage } );
            console.log("Message emitted to socket.io");
            $('#m').val('');
            //return false;
          }
        });
        return false;
      });
      socket.on('chat status', function(data) {
        var statusType = data.statusType;
        var statusMessage = data.statusMessage;
        $('#messages').append($('<li>').text("["+statusType+"] "+statusMessage));
      });
      socket.on('chat message', function(data){
        var nick = data.nick;
        var pgpMessage = data.pgpMessage;
        console.log("Got message, attempting to decrypt");
        var privkey = "<%= privkey %>";
        console.log("privkey: "+privkey);
        decryptMessage(privkey, "superawesomesecretpassphrase", pgpMessage, function(message, err) {
          console.log("inside decrypt message callback");
          if (err) {
            console.log("ERROR Decrypting message: "+err);
          } else {
            console.log("Message decrypted! - '"+message+"'");
            var messageLine = "["+nick+"] "+message;
            $('#messages').append($('<li>').text(messageLine));
          }
        });
      });
      function generateClientKeyPair(numBits, userId, passphrase, callback) {
        var options = {
          numBits: numBits,
          userId: userId,
          passphrase: passphrase
        }
        openpgp.generateKeyPair(options).then(function(keyPair) {
          var privKey = keyPair.privateKeyArmored;
          var pubKey = keyPair.publicKeyArmored;
          var keyPair = {
            privKey: privKey,
            pubKey: pubKey
          }
          return callback(keyPair);
        }).catch(function(error) {
          console.log("Error generating key pair: "+error);
        });
      };
      function encryptMessage(key, message, callback) {
        var publicKey = openpgp.key.readArmored(key);
        openpgp.encryptMessage(publicKey.keys, message).then(function(pgpMessage) {
          callback(pgpMessage, null);
        }).catch(function(error) {
          return callback(null, error);
        });
      }

      function decryptMessage(key, passphrase, pgpMessage, callback) {
        var privateKey = openpgp.key.readArmored(key).keys[0];
        privateKey.decrypt(passphrase);
        pgpMessage = openpgp.message.readArmored(pgpMessage);
        openpgp.decryptMessage(privateKey, pgpMessage).then(function(plaintext) {
          console.log("Decrypted message!");
          callback(plaintext, null);
        }).catch(function(error) {
          return callback(null, error);
        });
      }
    </script>
  </body>
</html>
